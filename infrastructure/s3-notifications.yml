AWSTemplateFormatVersion: '2010-09-09'
Description: 'S3 Notification Configuration for Pharma RAG system'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, dev-1, dev-2, staging, prod]
    Description: Environment name

  DocumentBucket:
    Type: String
    Description: S3 Bucket name for document storage

  DocumentProcessorFunctionArn:
    Type: String
    Description: ARN of the Document Processor Lambda Function

Resources:
  DocumentProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DocumentProcessorFunctionArn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${DocumentBucket}'

  # Custom resource to configure S3 bucket notifications
  S3NotificationConfiguration:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ServiceToken: !GetAtt NotificationConfigFunction.Arn
      BucketName: !Ref DocumentBucket
      LambdaFunctionArn: !Ref DocumentProcessorFunctionArn

  NotificationConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-s3-notification-config-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt NotificationConfigRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          
          def send_response(event, context, response_status, response_data=None):
              """Send response to CloudFormation"""
              if response_data is None:
                  response_data = {}
              
              response_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See CloudWatch Log Stream: {context.log_stream_name}',
                  'PhysicalResourceId': event.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              })
              
              http = urllib3.PoolManager()
              http.request('PUT', event['ResponseURL'], 
                          body=response_body,
                          headers={'Content-Type': 'application/json'})
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  bucket_name = event['ResourceProperties']['BucketName']
                  lambda_arn = event['ResourceProperties']['LambdaFunctionArn']
                  
                  print(f"Processing {event['RequestType']} for bucket: {bucket_name}")
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Configure S3 bucket notification
                      notification_config = {
                          'LambdaFunctionConfigurations': [
                              {
                                  'Id': 'DocumentProcessorTrigger',
                                  'LambdaFunctionArn': lambda_arn,
                                  'Events': ['s3:ObjectCreated:*'],
                                  'Filter': {
                                      'Key': {
                                          'FilterRules': [
                                              {
                                                  'Name': 'suffix',
                                                  'Value': '.pdf'
                                              }
                                          ]
                                      }
                                  }
                              }
                          ]
                      }
                      
                      print(f"Setting notification configuration: {notification_config}")
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                      print("Successfully configured S3 notifications")
                  
                  elif event['RequestType'] == 'Delete':
                      # Clear notifications on delete
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration={}
                      )
                      print("Successfully cleared S3 notifications")
                  
                  send_response(event, context, 'SUCCESS', {})
              except Exception as e:
                  error_msg = f"Error: {str(e)}"
                  print(error_msg)
                  # Send FAILED response with detailed error
                  send_response(event, context, 'FAILED', {'Error': error_msg})

  NotificationConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationConfig
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                  - s3:GetBucketNotification
                Resource: !Sub 'arn:aws:s3:::${DocumentBucket}'

Outputs:
  S3NotificationConfigured:
    Description: S3 notification configuration status
    Value: 'Configured'
    Export:
      Name: !Sub '${AWS::StackName}-S3NotificationConfigured'
