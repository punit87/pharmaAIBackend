AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS infrastructure for Pharma RAG system'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, dev-1, dev-2, staging, prod]
    Description: Environment name

  VPCId:
    Type: String
    Description: VPC ID from network stack

  PublicSubnet1:
    Type: String
    Description: Public Subnet 1 from network stack

  PublicSubnet2:
    Type: String
    Description: Public Subnet 2 from network stack

  PrivateSubnet1:
    Type: String
    Description: Private Subnet 1 from network stack

  PrivateSubnet2:
    Type: String
    Description: Private Subnet 2 from network stack

  ALBSecurityGroup:
    Type: String
    Description: ALB Security Group from network stack

  ECSSecurityGroup:
    Type: String
    Description: ECS Security Group from network stack

  RaganythingImageUri:
    Type: String
    Description: RAG-Anything Docker image URI

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key

  Neo4jUri:
    Type: String
    Description: Neo4j URI

  Neo4jUsername:
    Type: String
    Description: Neo4j Username

  Neo4jPassword:
    Type: String
    NoEcho: true
    Description: Neo4j Password

  OpenAIBaseUrl:
    Type: String
    Description: OpenAI Base URL
    Default: https://api.openai.com/v1

  DocumentBucket:
    Type: String
    Description: S3 Bucket name for document storage

Resources:
  # ALB Infrastructure (moved from main stack to avoid cross-stack dependencies)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'pharma-rag-alb-${Environment}'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'pharma-rag-alb-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Target Group for ECS Tasks
  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'pharma-ecs-tg-${Environment}-v2'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub 'pharma-ecs-tg-${Environment}-v2'
        - Key: Environment
          Value: !Ref Environment

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'pharma-cluster-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pharma-ecs-task-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pharma-ecs-task-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: '*'
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-websocket-connections'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-websocket-connections/*'

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub 'pharma-efs-${Environment}'
        - Key: Environment
          Value: !Ref Environment
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'pharma-efs-sg-${Environment}'
      GroupDescription: Security group for EFS
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'pharma-efs-sg-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  RaganythingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'pharma-raganything-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4096
      Memory: 8192
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: raganything
          Image: !Ref RaganythingImageUri
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: OPENAI_API_KEY
              Value: !Ref OpenAIApiKey
            - Name: OPENAI_BASE_URL
              Value: !Ref OpenAIBaseUrl
            - Name: NEO4J_URI
              Value: !Ref Neo4jUri
            - Name: NEO4J_USERNAME
              Value: !Ref Neo4jUsername
            - Name: NEO4J_PASSWORD
              Value: !Ref Neo4jPassword
            - Name: EFS_MOUNT_PATH
              Value: /mnt/efs
            - Name: RAG_OUTPUT_DIR
              Value: /mnt/efs/rag_output
            - Name: OUTPUT_DIR
              Value: /mnt/efs/rag_output
            - Name: MAX_TOKENS
              Value: '4000'
            - Name: PARSER
              Value: 'docling'
            - Name: PARSE_METHOD
              Value: 'ocr'
            - Name: S3_BUCKET
              Value: !Ref DocumentBucket
          MountPoints:
            - SourceVolume: efs-storage
              ContainerPath: /mnt/efs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref RaganythingLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: raganything
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 180
      Volumes:
        - Name: efs-storage
          EfsVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /

  RaganythingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/pharma-raganything-${Environment}'
      RetentionInDays: 7

  # ECS Service with ALB
  RaganythingService:
    Type: AWS::ECS::Service
    DependsOn: 
      - RaganythingTaskDefinition
      - ALBListener
    Properties:
      ServiceName: !Sub 'pharma-raganything-service-${Environment}'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref RaganythingTaskDefinition
      DesiredCount: 1  # Start with 1 task running - you can stop it manually from console
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !Ref ECSTargetGroup
          ContainerName: raganything
          ContainerPort: 8000
      EnableExecuteCommand: true

Outputs:
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  RaganythingTaskDefinition:
    Description: RAG-Anything Task Definition ARN
    Value: !Ref RaganythingTaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-RaganythingTaskDefinition'

  EFSFileSystem:
    Description: EFS File System ID
    Value: !Ref EFSFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-EFSFileSystem'

  RaganythingService:
    Description: ECS Service Name
    Value: !Ref RaganythingService
    Export:
      Name: !Sub '${AWS::StackName}-RaganythingService'

  ALBEndpoint:
    Description: ALB DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALBEndpoint'

  ALBArn:
    Description: ALB ARN for VPC Link
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
    Export:
      Name: !Sub '${AWS::StackName}-ALBArn'
