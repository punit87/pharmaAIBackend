AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pharma RAG Infrastructure - ECS Fargate, Lambda, API Gateway, S3'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, dev-1, dev-2, staging, prod]
    Description: Environment name
  
  RaganythingImageUri:
    Type: String
    Description: ECR URI for RAG-Anything container image
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key for LLM integration
  
  Neo4jUri:
    Type: String
    Default: 'neo4j+s://a16788ee.databases.neo4j.io'
    Description: Neo4j AuraDB connection URI
  
  Neo4jUsername:
    Type: String
    Default: 'neo4j'
    Description: Neo4j username
  
  Neo4jPassword:
    Type: String
    NoEcho: true
    Description: Neo4j password

Resources:
  # ECR Repository will be created by GitHub Actions if it doesn't exist

  # EFS File System for persistent storage
  RAGOutputFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub 'pharma-rag-output-${Environment}'
        - Key: Environment
          Value: !Ref Environment
      PerformanceMode: generalPurpose
      ThroughputMode: provisioned
      ProvisionedThroughputInMibps: 100

  # EFS Mount Targets
  RAGOutputMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref RAGOutputFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  RAGOutputMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref RAGOutputFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # EFS Security Group
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount targets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'pharma-efs-sg-${Environment}'

  # EFS Access Point
  RAGOutputAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref RAGOutputFileSystem
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        Path: /rag-output
        CreationInfo:
          OwnerUid: 1000
          OwnerGid: 1000
          Permissions: 755

  # S3 Bucket for document storage and processing
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pharma-documents-${Environment}-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'pharma-vpc-${Environment}'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'pharma-private-subnet-1-${Environment}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'pharma-private-subnet-2-${Environment}'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'pharma-public-subnet-1-${Environment}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'pharma-public-subnet-2-${Environment}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'pharma-igw-${Environment}'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'pharma-public-routes-${Environment}'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # NAT Gateway for private subnets
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'pharma-private-routes-1-${Environment}'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'pharma-cluster-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}/*'
                  - !GetAtt DocumentBucket.Arn
        - PolicyName: EC2Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeInstances
                Resource: '*'
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: !GetAtt RAGOutputFileSystem.Arn

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}/*'
                  - !GetAtt DocumentBucket.Arn
        - PolicyName: ECSExecAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:UpdateInstanceInformation
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  # Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'pharma-ecs-sg-${Environment}'
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'pharma-lambda-sg-${Environment}'
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


  # ECS Task Definition for RAG-Anything
  RaganythingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'pharma-raganything-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Volumes:
        - Name: rag-output-volume
          EfsVolumeConfiguration:
            FileSystemId: !Ref RAGOutputFileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref RAGOutputAccessPoint
      ContainerDefinitions:
        - Name: raganything
          Image: !Ref RaganythingImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref RaganythingLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: S3_BUCKET
              Value: !Ref DocumentBucket
            - Name: NEO4J_URI
              Value: !Ref Neo4jUri
            - Name: NEO4J_USERNAME
              Value: !Ref Neo4jUsername
            - Name: NEO4J_PASSWORD
              Value: !Ref Neo4jPassword
            - Name: OPENAI_API_KEY
              Value: !Ref OpenAIApiKey
            - Name: OUTPUT_DIR
              Value: '/rag-output/'
            - Name: PARSER
              Value: 'docling'
            - Name: PARSE_METHOD
              Value: 'auto'
            - Name: DOCLING_SERVICE_URL
              Value: 'http://localhost:8000'
          MountPoints:
            - SourceVolume: rag-output-volume
              ContainerPath: /rag-output
              ReadOnly: false
          HealthCheck:
            Command:
              - CMD-SHELL
              - "python3 -c 'import requests; requests.get(\"http://localhost:8000/health\", timeout=5)' || exit 1"
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 180

  # CloudWatch Log Groups
  RaganythingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/pharma-raganything-${Environment}'
      RetentionInDays: 30

  # Lambda Functions
  PresignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-presigned-url-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          
          s3_client = boto3.client('s3')
          
          def lambda_handler(event, context):
              try:
                  bucket_name = os.environ['S3_BUCKET']
                  
                  # Generate unique file name with timestamp
                  timestamp = datetime.now().strftime('%Y/%m/%d/%H%M%S')
                  file_name = f"uploads/{timestamp}/{context.aws_request_id}.pdf"
                  
                  # Generate presigned URL for PUT method - most flexible approach
                  presigned_url = s3_client.generate_presigned_url(
                      'put_object',
                      Params={
                          'Bucket': bucket_name, 
                          'Key': file_name
                      },
                      ExpiresIn=300  # 5 minutes for more flexibility
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                          'Access-Control-Allow-Headers': 'Content-Type'
                      },
                      'body': json.dumps({
                          'presigned_url': presigned_url,
                          'file_name': file_name,
                          'expires_in': 300,
                          'bucket': bucket_name,
                          'upload_method': 'PUT'
                      })
                  }
              except Exception as e:
                  print(f"Error generating presigned URL: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({'error': str(e)})
                  }
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref DocumentBucket
      Timeout: 30

  HealthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-health-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              try:
                  # Initialize ECS client
                  ecs_client = boto3.client('ecs')
                  
                  # Check if there are any running tasks
                  try:
                      response = ecs_client.list_tasks(
                          cluster=os.environ['ECS_CLUSTER'],
                          desiredStatus='RUNNING'
                      )
                      
                      task_count = len(response['taskArns'])
                      
                      if task_count > 0:
                          # Get task details
                          task_details = ecs_client.describe_tasks(
                              cluster=os.environ['ECS_CLUSTER'],
                              tasks=response['taskArns']
                          )
                          
                          tasks = task_details['tasks']
                          running_tasks = [t for t in tasks if t['lastStatus'] == 'RUNNING']
                          
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'status': 'healthy',
                                  'service': 'pharma-rag',
                                  'ecs_tasks': {
                                      'total': task_count,
                                      'running': len(running_tasks),
                                      'task_arns': [t['taskArn'] for t in running_tasks]
                                  },
                                  'timestamp': context.aws_request_id
                              })
                      else:
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'status': 'healthy',
                                  'service': 'pharma-rag',
                                  'ecs_tasks': {
                                      'total': 0,
                                      'running': 0,
                                      'task_arns': []
                                  },
                                  'timestamp': context.aws_request_id,
                                  'message': 'No ECS tasks running (serverless mode)'
                              })
                              
                  except Exception as e:
                      return {
                          'statusCode': 500,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'status': 'unhealthy',
                              'error': f'Failed to check ECS tasks: {str(e)}'
                          })
                      }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'status': 'unhealthy',
                          'error': str(e)
                      })
                  }
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
      Timeout: 30

  RagQueryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-rag-query-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import requests
          
          def lambda_handler(event, context):
              try:
                  # Parse the query from the event
                  if 'body' in event:
                      body = json.loads(event['body'])
                      query = body.get('query', '')
                  else:
                      query = event.get('query', '')

                  if not query:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'No query provided'})
                      }

                  print(f"Processing query: {query}")

                  # Initialize ECS client
                  ecs_client = boto3.client('ecs')
                  
                  try:
                      # Find existing running tasks first
                      print("Looking for existing RAG-Anything server...")
                      response = ecs_client.list_tasks(
                          cluster=os.environ['ECS_CLUSTER'],
                          desiredStatus='RUNNING'
                      )
                      
                      task_arn = None
                      private_ip = None
                      
                      if response['taskArns']:
                          # Get details of running tasks
                          task_details = ecs_client.describe_tasks(
                              cluster=os.environ['ECS_CLUSTER'],
                              tasks=response['taskArns']
                          )
                          
                          for task in task_details['tasks']:
                              if task['lastStatus'] == 'RUNNING':
                                  task_arn = task['taskArn']
                                  # Get private IP from network interfaces
                                  for container in task['containers']:
                                      if 'networkInterfaces' in container:
                                          for ni in container['networkInterfaces']:
                                              private_ip = ni.get('privateIpv4Address')
                                              break
                                      if private_ip:
                                          break
                                  break
                      
                      if not task_arn or not private_ip:
                          # Start new RAG-Anything server task
                          print("Starting new RAG-Anything server task...")
                          response = ecs_client.run_task(
                              cluster=os.environ['ECS_CLUSTER'],
                              taskDefinition=os.environ['RAGANYTHING_TASK_DEFINITION'],
                              capacityProviderStrategy=[
                                  {
                                      'capacityProvider': 'FARGATE',
                                      'weight': 1
                                  }
                              ],
                              networkConfiguration={
                                  'awsvpcConfiguration': {
                                      'subnets': os.environ['SUBNETS'].split(','),
                                      'securityGroups': [os.environ['SECURITY_GROUP']],
                                      'assignPublicIp': 'ENABLED'
                                  }
                              }
                          )
                          
                          task_arn = response['tasks'][0]['taskArn']
                          print(f"RAG-Anything server task started: {task_arn}")
                          
                          # Wait for task to be running
                          print("Waiting for server to start...")
                          waiter = ecs_client.get_waiter('tasks_running')
                          waiter.wait(
                              cluster=os.environ['ECS_CLUSTER'],
                              tasks=[task_arn],
                              WaiterConfig={
                                  'Delay': 10,
                                  'MaxAttempts': 30  # 5 minutes max to start
                              }
                          )
                          
                          # Get task details to find the private IP
                          task_details = ecs_client.describe_tasks(
                              cluster=os.environ['ECS_CLUSTER'],
                              tasks=[task_arn]
                          )
                          
                          task = task_details['tasks'][0]
                          if task['lastStatus'] != 'RUNNING':
                              return {
                                  'statusCode': 500,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({'error': 'Server failed to start'})
                              }
                          
                          # Get private IP from network interfaces
                          for container in task['containers']:
                              if 'networkInterfaces' in container:
                                  for ni in container['networkInterfaces']:
                                      private_ip = ni.get('privateIpv4Address')
                                      break
                              if private_ip:
                                  break
                          
                          if not private_ip:
                              return {
                                  'statusCode': 500,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({'error': 'Could not get server IP address'})
                              }
                      
                      # Make HTTP request to the server
                      server_url = f"http://{private_ip}:8000"
                      query_url = f"{server_url}/query"
                      
                      print(f"Making query request to: {query_url}")
                      query_response = requests.post(
                          query_url,
                          json={'query': query},
                          headers={'Content-Type': 'application/json'},
                          timeout=300  # 5 minutes timeout
                      )
                      
                      if query_response.status_code == 200:
                          result = query_response.json()
                          print("Query processed successfully")
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'status': 'success',
                                  'message': 'Query processed successfully.',
                                  'query': query,
                                  'result': result,
                                  'task_arn': task_arn
                              })
                          }
                      else:
                          print(f"Query failed with status: {query_response.status_code}")
                          return {
                              'statusCode': 500,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'error': f'Query failed: {query_response.text}',
                                  'task_arn': task_arn
                              })
                          }

                  except Exception as e:
                      print(f"Error running RAG-Anything task: {str(e)}")
                      return {
                          'statusCode': 500,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': f'Error running RAG-Anything task: {str(e)}'})
                      }

              except Exception as e:
                  print(f"Error processing query: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - !Ref RequestsLayer
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          RAGANYTHING_TASK_DEFINITION: !Ref RaganythingTaskDefinition
          SUBNETS: !Sub '${PrivateSubnet1},${PrivateSubnet2}'
          SECURITY_GROUP: !Ref ECSSecurityGroup
      Timeout: 300
  DocumentProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-document-processor-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import time
          import requests

          def lambda_handler(event, context):
              """Handle S3 document upload events"""
              try:
                  # Parse S3 event
                  for record in event['Records']:
                      bucket = record['s3']['bucket']['name']
                      key = record['s3']['object']['key']
                      
                      print(f"Processing document: s3://{bucket}/{key}")
                      
                      # Initialize ECS client
                      ecs_client = boto3.client('ecs')
                      
                      try:
                          # Check for existing running tasks first
                          print("Looking for existing RAG-Anything server...")
                          response = ecs_client.list_tasks(
                              cluster=os.environ['ECS_CLUSTER'],
                              desiredStatus='RUNNING'
                          )
                          
                          task_arn = None
                          private_ip = None
                          
                          if response['taskArns']:
                              # Get details of running tasks
                              task_details = ecs_client.describe_tasks(
                                  cluster=os.environ['ECS_CLUSTER'],
                                  tasks=response['taskArns']
                              )
                              
                              for task in task_details['tasks']:
                                  if task['lastStatus'] == 'RUNNING':
                                      task_arn = task['taskArn']
                                      # Get private IP from network interfaces
                                      for container in task['containers']:
                                          if 'networkInterfaces' in container:
                                              for ni in container['networkInterfaces']:
                                                  private_ip = ni.get('privateIpv4Address')
                                                  break
                                          if private_ip:
                                              break
                                      break
                          
                          if not task_arn or not private_ip:
                              # Start new RAG-Anything server task
                              print("Starting new RAG-Anything server task...")
                              response = ecs_client.run_task(
                                  cluster=os.environ['ECS_CLUSTER'],
                                  taskDefinition=os.environ['RAGANYTHING_TASK_DEFINITION'],
                                  capacityProviderStrategy=[
                                      {
                                          'capacityProvider': 'FARGATE',
                                          'weight': 1
                                      }
                                  ],
                                  networkConfiguration={
                                      'awsvpcConfiguration': {
                                          'subnets': os.environ['SUBNETS'].split(','),
                                          'securityGroups': [os.environ['SECURITY_GROUP']],
                                          'assignPublicIp': 'ENABLED'
                                      }
                                  }
                              )
                              
                              task_arn = response['tasks'][0]['taskArn']
                              print(f"RAG-Anything server task started: {task_arn}")
                              
                              # Wait for task to be running
                              print("Waiting for server to start...")
                              waiter = ecs_client.get_waiter('tasks_running')
                              waiter.wait(
                                  cluster=os.environ['ECS_CLUSTER'],
                                  tasks=[task_arn],
                                  WaiterConfig={
                                      'Delay': 10,
                                      'MaxAttempts': 30  # 5 minutes max to start
                                  }
                              )
                              
                              # Get task details to find the private IP
                              task_details = ecs_client.describe_tasks(
                                  cluster=os.environ['ECS_CLUSTER'],
                                  tasks=[task_arn]
                              )
                              
                              task = task_details['tasks'][0]
                              if task['lastStatus'] != 'RUNNING':
                                  print("Server failed to start")
                                  continue
                              
                              # Get private IP from network interfaces
                              for container in task['containers']:
                                  if 'networkInterfaces' in container:
                                      for ni in container['networkInterfaces']:
                                          private_ip = ni.get('privateIpv4Address')
                                          break
                                  if private_ip:
                                      break
                              
                              if not private_ip:
                                  print("Could not get server IP address")
                                  continue
                          
                          # Make HTTP request to the server
                          server_url = f"http://{private_ip}:8000"
                          process_url = f"{server_url}/process"
                          
                          print(f"Making process request to: {process_url}")
                          process_data = {
                              'bucket': bucket,
                              'key': key
                          }
                          
                          process_response = requests.post(
                              process_url,
                              json=process_data,
                              headers={'Content-Type': 'application/json'},
                              timeout=600  # 10 minutes timeout for document processing
                          )
                          
                          if process_response.status_code == 200:
                              result = process_response.json()
                              print(f"Document processing completed successfully for s3://{bucket}/{key}")
                              print(f"Result: {result}")
                          else:
                              print(f"Document processing failed with status: {process_response.status_code}")
                              print(f"Response: {process_response.text}")
                          
                      except Exception as e:
                          print(f"Error processing document s3://{bucket}/{key}: {str(e)}")
                          continue
                          
              except Exception as e:
                  print(f"Error processing S3 event: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Document processing completed'})
              }
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - !Ref RequestsLayer
      Timeout: 300
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          RAGANYTHING_TASK_DEFINITION: !Ref RaganythingTaskDefinition
          SUBNETS: !Sub '${PrivateSubnet1},${PrivateSubnet2}'
          SECURITY_GROUP: !Ref ECSSecurityGroup

  RagQueryMultimodalFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'pharma-rag-query-multimodal-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          def lambda_handler(event, context):
              try:
                  # Parse the query from the event
                  if 'body' in event:
                      body = json.loads(event['body'])
                      query = body.get('query', '')
                      image_url = body.get('image_url', '')
                  else:
                      query = event.get('query', '')
                      image_url = event.get('image_url', '')

                  if not query:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': 'No query provided'})
                      }

                  print(f"Processing multimodal query: {query}")
                  if image_url:
                      print(f"Image URL: {image_url}")

                  # Initialize ECS client
                  ecs_client = boto3.client('ecs')

                  try:
                      # Run RAG-Anything task in server mode
                      print("Starting RAG-Anything server task for multimodal query...")
                      response = ecs_client.run_task(
                          cluster=os.environ['ECS_CLUSTER'],
                          taskDefinition=os.environ['RAGANYTHING_TASK_DEFINITION'],
                          capacityProviderStrategy=[
                              {
                                  'capacityProvider': 'FARGATE',
                                  'weight': 1
                              }
                          ],
                          networkConfiguration={
                              'awsvpcConfiguration': {
                                  'subnets': os.environ['SUBNETS'].split(','),
                                  'securityGroups': [os.environ['SECURITY_GROUP']],
                                  'assignPublicIp': 'ENABLED'
                              }
                          },
                          overrides={
                              'containerOverrides': [
                                  {
                                      'name': 'raganything',
                                      'environment': [
                                          {'name': 'QUERY', 'value': query},
                                          {'name': 'IMAGE_URL', 'value': image_url}
                                      ]
                                  }
                              ]
                          }
                      )

                      task_arn = response['tasks'][0]['taskArn']
                      print(f"RAG-Anything multimodal task started: {task_arn}")

                      # Wait for task to be running
                      print("Waiting for server to start...")
                      waiter = ecs_client.get_waiter('tasks_running')
                      waiter.wait(
                          cluster=os.environ['ECS_CLUSTER'],
                          tasks=[task_arn],
                          WaiterConfig={
                              'Delay': 10,
                              'MaxAttempts': 30  # 5 minutes max to start
                          }
                      )

                      # Get task details to find the private IP
                      task_details = ecs_client.describe_tasks(
                          cluster=os.environ['ECS_CLUSTER'],
                          tasks=[task_arn]
                      )

                      task = task_details['tasks'][0]
                      if task['lastStatus'] != 'RUNNING':
                          return {
                              'statusCode': 500,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({'error': 'Server failed to start'})
                          }

                      # Get private IP from network interfaces
                      private_ip = None
                      for container in task['containers']:
                          if 'networkInterfaces' in container:
                              for ni in container['networkInterfaces']:
                                  private_ip = ni.get('privateIpv4Address')
                                  break
                          if private_ip:
                              break

                      if not private_ip:
                          return {
                              'statusCode': 500,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({'error': 'Could not get server IP address'})
                          }

                      # Make HTTP request to the server
                      import requests
                      server_url = f"http://{private_ip}:8000"
                      query_url = f"{server_url}/query_multimodal"

                      print(f"Making multimodal query request to: {query_url}")
                      query_data = {'query': query}
                      if image_url:
                          query_data['image_url'] = image_url
                          
                      query_response = requests.post(
                          query_url,
                          json=query_data,
                          headers={'Content-Type': 'application/json'},
                          timeout=300  # 5 minutes timeout
                      )

                      if query_response.status_code == 200:
                          result = query_response.json()
                          print("Multimodal query processed successfully")
                          return {
                              'statusCode': 200,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'status': 'success',
                                  'query': query,
                                  'image_url': image_url,
                                  'result': result,
                                  'task_arn': task_arn
                              })
                          }
                      else:
                          print(f"Multimodal query failed with status: {query_response.status_code}")
                          return {
                              'statusCode': 500,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'error': f'Multimodal query failed: {query_response.text}',
                                  'task_arn': task_arn
                              })
                          }

                  except Exception as e:
                      print(f"Error running RAG-Anything multimodal task: {str(e)}")
                      return {
                          'statusCode': 500,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({'error': f'Error running RAG-Anything multimodal task: {str(e)}'})
                      }

              except Exception as e:
                  print(f"Error processing multimodal query: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref RequestsLayer
      Timeout: 300
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          RAGANYTHING_TASK_DEFINITION: !Ref RaganythingTaskDefinition
          SUBNETS: !Sub '${PrivateSubnet1},${PrivateSubnet2}'
          SECURITY_GROUP: !Ref ECSSecurityGroup

  # Lambda Layer for requests
  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'pharma-requests-${Environment}'
      Description: 'Requests library for Lambda functions'
      Content:
        S3Bucket: pharma-lambda-layers-864899869769-us-east-1
        S3Key: requests-layer.zip
      CompatibleRuntimes:
        - python3.11

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ECSTaskExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:DescribeTasks
                  - ecs:DescribeTaskDefinition
                  - ecs:ListTasks
                  - iam:PassRole
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}/*'
                  - !GetAtt DocumentBucket.Arn
        - PolicyName: EC2Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeInstances
                Resource: '*'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'pharma-api-${Environment}'
      Description: Pharma RAG API Gateway

  PresignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: presigned-url

  PresignedUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref PresignedUrlResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignedUrlFunction.Arn}/invocations'

  RagQueryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: rag-query

  RagQueryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RagQueryResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RagQueryFunction.Arn}/invocations'

  # Health endpoint
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: health

  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthFunction.Arn}/invocations'

  # Multimodal query endpoint
  RagQueryMultimodalResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: rag-query-multimodal

  RagQueryMultimodalMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RagQueryMultimodalResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RagQueryMultimodalFunction.Arn}/invocations'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PresignedUrlMethod
      - RagQueryMethod
      - HealthMethod
      - RagQueryMultimodalMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Sub '${Environment}'

  # Lambda permissions for API Gateway
  PresignedUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PresignedUrlFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  RagQueryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RagQueryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  HealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  RagQueryMultimodalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RagQueryMultimodalFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # S3 Lambda Permission
  S3LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DocumentProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt DocumentBucket.Arn

Outputs:
  RaganythingRepositoryUri:
    Description: ECR Repository URI for RAG-Anything
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/pharma-raganything-${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-RaganythingRepositoryUri'

  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  DocumentBucketName:
    Description: S3 Bucket for document storage
    Value: !Ref DocumentBucket
    Export:
      Name: !Sub '${AWS::StackName}-DocumentBucket'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
