# ============================================
# Docling Dockerfile - Ultra-minimal approach
# ============================================
# Use the smallest possible base image to minimize space usage
FROM public.ecr.aws/lambda/python:3.10 AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/var/lang/lib/python3.10/site-packages" \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Install only essential system dependencies
RUN yum update -y && \
    yum install -y \
        tesseract \
        tesseract-langpack-eng \
        libtesseract-dev \
        libleptonica-dev \
    && yum clean all \
    && rm -rf /var/cache/yum

# Install Python dependencies with minimal packages
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
        numpy \
        pandas \
        Pillow \
        pytesseract \
        docling \
    && pip cache purge \
    && rm -rf /root/.cache/pip

# Copy the Lambda function
COPY lambda_function.py ${LAMBDA_TASK_ROOT}/

# Create a simple health check script
RUN printf 'import sys\nimport json\n\ndef test_imports():\n    try:\n        import numpy\n        import pandas\n        import PIL\n        import pytesseract\n        from docling.document_converter import DocumentConverter\n        converter = DocumentConverter()\n        print("✅ All imports successful")\n        return True\n    except Exception as e:\n        print(f"❌ Import failed: {e}")\n        return False\n\nif __name__ == "__main__":\n    success = test_imports()\n    sys.exit(0 if success else 1)\n' > ${LAMBDA_TASK_ROOT}/test_docling.py

# Run health check
RUN python ${LAMBDA_TASK_ROOT}/test_docling.py

# Set the CMD to your handler
CMD ["lambda_function.lambda_handler"]