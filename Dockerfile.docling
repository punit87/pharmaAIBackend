# Multi-stage Dockerfile for Docling with Tesseract OCR
# Stage 1: Builder stage for installing dependencies and building Docling
# Use Ubuntu base image which has better package availability
FROM ubuntu:22.04 AS builder

# ============================================
# System Dependencies for Builder
# ============================================
RUN apt-get update && \
    apt-get install -y \
    poppler-utils \
    python3 \
    python3-pip \
    curl \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf /var/cache/apt/archives/* \
    && rm -rf /var/log/* \
    && find /var/log -type f -name "*.log" -delete

# ============================================
# Python Environment Setup
# ============================================
# Upgrade pip
RUN python3 -m pip install --upgrade pip

# ============================================
# Docling Installation (Pre-compiled packages only)
# ============================================
# Install Docling and dependencies using pre-compiled packages
RUN python3 -m pip install --no-cache-dir --only-binary=all \
    numpy \
    scipy \
    pandas \
    pillow \
    opencv-python-headless \
    docling \
    pytesseract \
    boto3

# ============================================
# Cleanup and Space Optimization
# ============================================
# Remove unnecessary files to reduce image size
RUN python3 -m pip cache purge && \
    rm -rf /root/.cache/pip && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    rm -rf /var/cache/apt/archives/* && \
    rm -rf /var/log/* && \
    find /var/log -type f -name "*.log" -delete && \
    find /usr -name "*.pyc" -delete && \
    find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /usr -name "*.pyo" -delete && \
    find /usr -name "*.pyd" -delete && \
    find /usr -name "test_*" -type f -delete 2>/dev/null || true && \
    find /usr -name "*_test.py" -type f -delete 2>/dev/null || true && \
    find /usr -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /usr -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /usr -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true

# ============================================
# Stage 2: Final Runtime Stage
# ============================================
# Import Tesseract image from GitHub registry (created via GitHub Actions)
FROM ghcr.io/punit87/tesseract-lambda:latest AS tesseract

# Use the base Lambda Python runtime
FROM public.ecr.aws/lambda/python:3.11 AS runtime

# Copy Tesseract and its dependencies from the prepared GitHub registry image
COPY --from=tesseract /opt/tesseract/bin/tesseract /usr/bin/tesseract
COPY --from=tesseract /opt/tesseract/lib/ /usr/lib64/
COPY --from=tesseract /opt/tesseract/share/tesseract-ocr /usr/share/tesseract-ocr

# ============================================
# Copy Python Dependencies
# ============================================
# Copy installed packages from builder stage
COPY --from=builder /usr/local/lib/python3.10/dist-packages /var/lang/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /var/lang/bin

# ============================================
# Final Cleanup and Space Optimization
# ============================================
# Remove unnecessary files from the final image
RUN rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    rm -rf /var/cache/* && \
    rm -rf /var/log/* && \
    find /var/log -type f -name "*.log" -delete && \
    find /var/lang -name "*.pyc" -delete && \
    find /var/lang -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /var/lang -name "*.pyo" -delete && \
    find /var/lang -name "*.pyd" -delete && \
    find /var/lang -name "test_*" -type f -delete 2>/dev/null || true && \
    find /var/lang -name "*_test.py" -type f -delete 2>/dev/null || true && \
    find /var/lang -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /var/lang -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /var/lang -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /usr -name "*.pyc" -delete && \
    find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# ============================================
# Environment Variables
# ============================================
# Tesseract environment variables are inherited from the tesseract image
# Only set Docling-specific environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/var/lang/lib/python3.11/site-packages" \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# ============================================
# Copy Lambda Handler
# ============================================
# Copy the comprehensive Lambda handler
COPY lambda_function.py ${LAMBDA_TASK_ROOT}/lambda_function.py

# ============================================
# Health Check (Optional)
# ============================================
# Create test file for optional health check
RUN printf 'import sys\nimport json\nimport traceback\n\ndef test_imports():\n    try:\n        print("Testing basic imports...")\n        import numpy\n        print("✓ numpy imported successfully")\n        \n        import pandas\n        print("✓ pandas imported successfully")\n        \n        import PIL\n        print("✓ PIL imported successfully")\n        \n        import pytesseract\n        print("✓ pytesseract imported successfully")\n        \n        print("Testing Docling import...")\n        from docling.document_converter import DocumentConverter\n        print("✓ Docling imported successfully")\n        \n        print("Testing Docling initialization...")\n        converter = DocumentConverter()\n        print("✓ Docling initialized successfully")\n        \n        return True\n    except Exception as e:\n        print(f"✗ Error: {e}")\n        print(f"Error type: {type(e).__name__}")\n        print("Full traceback:")\n        traceback.print_exc()\n        return False\n\nif __name__ == "__main__":\n    print("Starting health check...")\n    success = test_imports()\n    if success:\n        print("✅ All tests passed!")\n        sys.exit(0)\n    else:\n        print("❌ Health check failed!")\n        sys.exit(1)\n' > ${LAMBDA_TASK_ROOT}/test_docling.py

# Run health check (continue on failure to allow build to complete)
RUN python ${LAMBDA_TASK_ROOT}/test_docling.py || echo "Health check failed, but continuing build..."

# ============================================
# Final Configuration
# ============================================
# Set Lambda handler
CMD ["lambda_function.lambda_handler"]

# Add labels for metadata
LABEL maintainer="PharmaAI Team" \
      version="1.0.0" \
      description="Docling document processing with Tesseract OCR for AWS Lambda" \
      docling_version="latest"
