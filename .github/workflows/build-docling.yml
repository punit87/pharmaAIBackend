# Build Tesseract, Docling, and RAG-Anything Docker images for document processing
# This workflow builds and pushes all three images to GitHub Container Registry
name: Build Tesseract, Docling, and RAG-Anything Images

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  DOCLING_IMAGE: ${{ github.repository_owner }}/docling
  TESSERACT_IMAGE: ${{ github.repository_owner }}/tesseract-lambda
  RAGANYTHING_IMAGE: ${{ github.repository_owner }}/raganything
  RAGANYTHING_LAMBDA_IMAGE: ${{ github.repository_owner }}/raganything-lambda

jobs:
  # Job 1: Build Tesseract image only
  build-tesseract:
    if: ${{ false }} # temporarily disabled to save runner space
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Basic cleanup before Tesseract build
      run: |
        echo "ðŸ§¹ Basic cleanup before Tesseract build..."
        docker system prune -f
        echo "ðŸ“Š Disk usage before Tesseract build:"
        df -h
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Tesseract image (AMD64 only to save space)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.tesseract
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Clean up after Tesseract build
      run: |
        echo "ðŸ§¹ Cleaning up after Tesseract build..."
        docker system prune -af --volumes
        docker builder prune -af
        docker container prune -f
        docker image prune -af
        docker volume prune -f
        docker network prune -f
        echo "ðŸ“Š Disk usage after Tesseract build:"
        df -h

  # Job 2: Build Docling image (depends on Tesseract)
  build-docling:
    if: ${{ false }} # temporarily disabled to save runner space
    needs: build-tesseract
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Basic cleanup before Docling build
      run: |
        echo "ðŸ§¹ Basic cleanup before Docling build..."
        docker system prune -f
        echo "ðŸ“Š Disk usage before Docling build:"
        df -h
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Wait for Tesseract image to be available
      run: |
        echo "Waiting for Tesseract image to be available in registry..."
        sleep 15
        docker pull ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest
        echo "âœ… Tesseract image is available and ready for Docling build"

    - name: Build and push Docling image (AMD64 only to save space)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.docling
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Final cleanup after Docling build
      run: |
        echo "ðŸ§¹ Final cleanup after Docling build..."
        docker system prune -af --volumes
        docker builder prune -af
        docker container prune -f
        docker image prune -af
        docker volume prune -f
        docker network prune -f
  # Job 3: Build RAG-Anything image (depends on Docling)
  build-raganything:
    # run independently; will pull Docling from GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Basic cleanup before RAG-Anything build
      run: |
        echo "ðŸ§¹ Basic cleanup before RAG-Anything build..."
        docker system prune -f
        echo "ðŸ“Š Disk usage before RAG-Anything build:"
        df -h
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    # Use standard docker build to avoid BuildKit overlay disk usage

    - name: Wait for Docling image to be available
      run: |
        echo "Waiting for Docling image to be available in registry..."
        sleep 15
        docker pull ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:latest
        echo "âœ… Docling image is available and ready for RAG-Anything build"

    - name: Build and push RAG-Anything image (docker build, lighter extras)
      run: |
        echo "Building RAG-Anything image (extras=text) with standard Docker build..."
        docker build --build-arg RAGANYTHING_EXTRAS=text -f ./Dockerfile.raganything -t ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:latest .
        docker tag ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:latest ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:latest ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:${{ github.ref_name }}
        echo "Pushing RAG-Anything image..."
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:${{ github.ref_name }}

  # Job 4: Build Lambda-targeted RAG-Anything image only
  build-raganything-lambda:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Basic cleanup before Lambda image build
      run: |
        echo "ðŸ§¹ Basic cleanup before Lambda RAG-Anything build..."
        docker system prune -f
        df -h

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push RAG-Anything Lambda image
      run: |
        echo "Building Lambda-targeted RAG-Anything image (extras=text) ..."
        docker build --build-arg RAGANYTHING_EXTRAS=text -f ./Dockerfile.raganything.lambda -t ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:latest .
        docker tag ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:latest ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:latest ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:${{ github.ref_name }}
        echo "Pushing Lambda image..."
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.RAGANYTHING_LAMBDA_IMAGE }}:${{ github.ref_name }}
        
    - name: Smoke test RAG-Anything image imports
      run: |
        echo "Running RAG-Anything import smoke test..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.RAGANYTHING_IMAGE }}:latest python3 /var/task/test_raganything.py || (
          echo "RAG-Anything import smoke test failed" && exit 1
        )
        
    - name: Final cleanup after RAG-Anything build
      run: |
        echo "ðŸ§¹ Final cleanup after RAG-Anything build..."
        docker system prune -af --volumes
        docker builder prune -af
        docker container prune -f
        docker image prune -af
        docker volume prune -f
        docker network prune -f
        echo "ðŸ“Š Final disk usage:"
        df -h