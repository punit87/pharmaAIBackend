# Build Tesseract and Docling Docker images for document processing
# This workflow builds and pushes both images to GitHub Container Registry
name: Build Tesseract and Docling Images

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  DOCLING_IMAGE: ${{ github.repository_owner }}/docling
  TESSERACT_IMAGE: ${{ github.repository_owner }}/tesseract-lambda

jobs:
  # Main job that builds both Tesseract and Docling images
  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Ultra-aggressive workspace cleanup before build
      run: |
        echo "ðŸ§¹ Starting ULTRA-AGGRESSIVE workspace cleanup..."
        
        # Clean up system files aggressively
        sudo rm -rf /tmp/* 2>/dev/null || true
        sudo rm -rf /var/tmp/* 2>/dev/null || true
        sudo rm -rf /var/cache/* 2>/dev/null || true
        sudo rm -rf /var/log/* 2>/dev/null || true
        sudo find /var/log -type f -name "*.log" -delete 2>/dev/null || true
        
        # Clean up Docker system ULTRA aggressively
        docker system prune -af --volumes 2>/dev/null || true
        docker builder prune -af 2>/dev/null || true
        docker container prune -f 2>/dev/null || true
        docker image prune -af 2>/dev/null || true
        docker volume prune -f 2>/dev/null || true
        docker network prune -f 2>/dev/null || true
        
        # Clean up any existing build artifacts
        rm -rf .dockerignore 2>/dev/null || true
        rm -rf *.log 2>/dev/null || true
        rm -rf build/ 2>/dev/null || true
        rm -rf dist/ 2>/dev/null || true
        rm -rf node_modules/ 2>/dev/null || true
        rm -rf .pytest_cache/ 2>/dev/null || true
        rm -rf __pycache__/ 2>/dev/null || true
        rm -rf .coverage 2>/dev/null || true
        rm -rf .mypy_cache/ 2>/dev/null || true
        
        # Clean up Python cache files
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyo" -delete 2>/dev/null || true
        find . -name "*.pyd" -delete 2>/dev/null || true
        find . -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Clean up any test files
        find . -name "test_*" -type f -delete 2>/dev/null || true
        find . -name "*_test.py" -type f -delete 2>/dev/null || true
        find . -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Clean up large files that might be taking space
        find . -name "*.so" -size +5M -delete 2>/dev/null || true
        find . -name "*.dylib" -size +5M -delete 2>/dev/null || true
        find . -name "*.dll" -size +5M -delete 2>/dev/null || true
        
        # Show disk usage before build
        echo "ðŸ“Š Disk usage before build:"
        df -h
        du -sh . || true
        
        echo "âœ… ULTRA-AGGRESSIVE workspace cleanup completed!"
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Tesseract image (AMD64 only to save space)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.tesseract
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Clean up after Tesseract build
      run: |
        echo "ðŸ§¹ Cleaning up after Tesseract build..."
        docker system prune -f
        docker builder prune -f
        echo "ðŸ“Š Disk usage after Tesseract build:"
        df -h

    - name: Wait for Tesseract image to be available
      run: |
        echo "Waiting for Tesseract image to be available in registry..."
        sleep 10
        docker pull ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest
        echo "âœ… Tesseract image is available and ready for Docling build"

    - name: Build and push Docling image (AMD64 only to save space)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.docling
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Final cleanup after Docling build
      run: |
        echo "ðŸ§¹ Final cleanup after Docling build..."
        docker system prune -af --volumes
        docker builder prune -af
        docker container prune -f
        docker image prune -af
        docker volume prune -f
        docker network prune -f
        echo "ðŸ“Š Final disk usage:"
        df -h
        
    - name: Cleanup after build
      if: always()
      run: |
        echo "ðŸ§¹ Final cleanup after build..."
        
        # Remove Docker images to free space
        docker rmi $(docker images -q) 2>/dev/null || true
        docker system prune -af --volumes
        
        # Show final disk usage
        echo "ðŸ“Š Final disk usage:"
        df -h
        
        echo "âœ… Build cleanup completed!"

    - name: Summary
      run: |
        echo "## ðŸš€ Docker Images Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tesseract Lambda" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docling" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull Tesseract Lambda" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.TESSERACT_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Pull Docling" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.DOCLING_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload build logs
      if: failure()
      run: |
        echo "ðŸ“‹ Collecting build logs for debugging..."
        mkdir -p build-logs
        find . -name "*.log" -exec cp {} build-logs/ \; 2>/dev/null || true
        docker logs $(docker ps -aq) > build-logs/docker-logs.txt 2>/dev/null || true
        echo "ðŸ“Š Build artifacts collected:"
        ls -la build-logs/ || echo "No logs found"
        
    - name: Upload artifacts
      if: failure() && (contains(github.event.head_commit.message, 'debug') || contains(github.event.head_commit.message, 'logs'))
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build-logs/
        if-no-files-found: ignore
        retention-days: 7
