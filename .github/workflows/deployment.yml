# Pharma RAG Infrastructure Deployment Workflow
# 
# Required GitHub Secrets:
# - AWS_ACCESS_KEY_ID: AWS access key for deployment
# - AWS_SECRET_ACCESS_KEY: AWS secret key for deployment  
# - OPENAI_API_KEY: OpenAI API key for LLM integration
# - NEO4J_PASSWORD: Neo4j database password
#
# Optional GitHub Secrets (with defaults):
# - AWS_ACCOUNT_ID: AWS account ID (defaults to 864899869769)
# - NEO4J_URI: Neo4j connection URI (defaults to neo4j+s://a16788ee.databases.neo4j.io)
# - NEO4J_USERNAME: Neo4j username (defaults to neo4j)

name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'lambda/**'
      - '.github/workflows/deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'lambda/**'
      - '.github/workflows/deployment.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  STACK_NAME: pharma-rag-infrastructure
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID || '864899869769' }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_DOCLING: pharma-docling
  ECR_REPOSITORY_RAGANYTHING: pharma-raganything

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Required Secrets
        run: |
          echo "🔍 Validating required secrets..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "❌ OPENAI_API_KEY secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.NEO4J_PASSWORD }}" ]; then
            echo "❌ NEO4J_PASSWORD secret is missing"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/ecs-infrastructure.yml \
            --stack-name $STACK_NAME-${{ github.event.inputs.environment || 'dev' }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ github.event.inputs.environment || 'dev' }} \
              DoclingImageUri=$ECR_REGISTRY/$ECR_REPOSITORY_DOCLING:latest \
              RaganythingImageUri=$ECR_REGISTRY/$ECR_REPOSITORY_RAGANYTHING:latest \
              OpenAIApiKey=${{ secrets.OPENAI_API_KEY }} \
              Neo4jUri=${{ secrets.NEO4J_URI || 'neo4j+s://a16788ee.databases.neo4j.io' }} \
              Neo4jUsername=${{ secrets.NEO4J_USERNAME || 'neo4j' }} \
              Neo4jPassword=${{ secrets.NEO4J_PASSWORD }} \
            --region $AWS_REGION

      - name: Deploy Lambda Functions
        run: |
          # Package and deploy Lambda functions
          echo "📦 Packaging Lambda functions..."
          cd lambda
          
          # Check if lambda directory exists and has subdirectories
          if [ ! -d "." ] || [ -z "$(ls -A .)" ]; then
            echo "⚠️ No Lambda functions found in lambda directory"
            exit 0
          fi
          
          for dir in */; do
            if [ -f "$dir/requirements.txt" ]; then
              echo "🔧 Deploying Lambda function: ${dir%/}"
              cd "$dir"
              
              # Install dependencies
              pip install -r requirements.txt -t . --quiet
              
              # Create deployment package
              zip -r "../${dir%/}.zip" . -q
              
              # Update Lambda function code
              FUNCTION_NAME="pharma-${dir%/}-${{ github.event.inputs.environment || 'dev' }}"
              echo "📤 Updating function: $FUNCTION_NAME"
              
              aws lambda update-function-code \
                --function-name "$FUNCTION_NAME" \
                --zip-file fileb://../${dir%/}.zip \
                --region $AWS_REGION
              
              if [ $? -eq 0 ]; then
                echo "✅ Successfully updated $FUNCTION_NAME"
              else
                echo "❌ Failed to update $FUNCTION_NAME"
                exit 1
              fi
              
              cd ..
            else
              echo "⚠️ Skipping ${dir%/} - no requirements.txt found"
            fi
          done

      - name: Get Stack Outputs
        id: stack-outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME-${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].Outputs' \
            --region $AWS_REGION)
          echo "outputs=$OUTPUTS" >> $GITHUB_OUTPUT

      - name: Display Deployment Info
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "Stack Name: $STACK_NAME-${{ github.event.inputs.environment || 'dev' }}"
          echo "Region: $AWS_REGION"
          echo ""
          echo "📋 Stack Outputs:"
          echo '${{ steps.stack-outputs.outputs.outputs }}'
