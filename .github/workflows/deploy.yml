name: Deploy Pharma RAG Infrastructure

on:
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip ECR image validation'
        required: false
        default: 'false'
        type: boolean

env:
  ECR_REPOSITORY: pharma-raganything-dev

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Validate ECR Images Exist
      if: ${{ !inputs.skip_validation }}
      env:
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        echo "üîç [VALIDATE] Checking ECR images exist before deployment..."
        VALIDATE_START=$(date +%s.%3N)
        
        # Get AWS Account ID and region
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Set image URI
        RAGANYTHING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"
        
        echo "üìã [VALIDATE] Checking image: $RAGANYTHING_IMAGE_URI"
        
        # Wait and retry logic for ECR image validation
        MAX_ATTEMPTS=10
        RETRY_DELAY=30
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "üîÑ [VALIDATE] Attempt $ATTEMPT/$MAX_ATTEMPTS - Checking ECR image..."
          
          # Check if ECR repository exists
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "‚úÖ [VALIDATE] ECR repository exists: $ECR_REPOSITORY"
            
            # Check if image exists in repository
            if aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag=latest --region "$AWS_REGION" >/dev/null 2>&1; then
              echo "‚úÖ [VALIDATE] Image exists: $RAGANYTHING_IMAGE_URI"
              echo "üéâ [VALIDATE] All ECR images validated successfully!"
              break
            else
              echo "‚è≥ [VALIDATE] Image not found yet, waiting $RETRY_DELAY seconds..."
            fi
          else
            echo "‚è≥ [VALIDATE] ECR repository not found yet, waiting $RETRY_DELAY seconds..."
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå [VALIDATE] Failed to find ECR images after $MAX_ATTEMPTS attempts"
            echo "‚ùå [VALIDATE] Expected image: $RAGANYTHING_IMAGE_URI"
            echo "‚ùå [VALIDATE] Please check if the build-and-push job completed successfully"
            exit 1
          fi
          
          sleep $RETRY_DELAY
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        VALIDATE_END=$(date +%s.%3N)
        VALIDATE_DURATION=$(echo "$VALIDATE_END - $VALIDATE_START" | bc)
        echo "‚úÖ [VALIDATE] ECR validation completed in ${VALIDATE_DURATION}s"

    - name: Skip ECR Validation
      if: ${{ inputs.skip_validation }}
      run: |
        echo "‚ö†Ô∏è [SKIP] ECR image validation skipped by user input"
        echo "‚ö†Ô∏è [SKIP] Proceeding with deployment without validation"

    - name: Deploy CloudFormation stack
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
      run: |
        echo "üîÑ [DEPLOY] Starting CloudFormation deployment at $(date)"
        DEPLOY_START=$(date +%s.%3N)
        
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Set variables
        STACK_NAME="pharma-rag-infrastructure"
        ENVIRONMENT="dev"
        TEMPLATE_FILE="infrastructure/ecs-infrastructure.yml"
        
        # Set image URI
        RAGANYTHING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/pharma-raganything-dev:latest"
        
        echo "üìã [DEPLOY] Deploying CloudFormation stack: $STACK_NAME-$ENVIRONMENT"
        echo "üìã [DEPLOY] RAG-Anything async server Image URI: $RAGANYTHING_IMAGE_URI"
          echo "üìã [DEPLOY] Features: MVP Mode, Document Processing, Query Processing, Multimodal RAG, Docling parser"
        
        # Deploy CloudFormation stack
        echo "üöÄ [DEPLOY] Starting CloudFormation deployment..."
        CF_START=$(date +%s.%3N)
        aws cloudformation deploy \
          --template-file "$TEMPLATE_FILE" \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            Environment="$ENVIRONMENT" \
            RaganythingImageUri="$RAGANYTHING_IMAGE_URI" \
            OpenAIApiKey="$OPENAI_API_KEY" \
            Neo4jUri="$NEO4J_URI" \
            Neo4jUsername="$NEO4J_USERNAME" \
            Neo4jPassword="$NEO4J_PASSWORD" \
          --region "$AWS_REGION"
        CF_END=$(date +%s.%3N)
        CF_DURATION=$(echo "$CF_END - $CF_START" | bc)
        echo "‚úÖ [DEPLOY] CloudFormation deployment completed in ${CF_DURATION}s"
        
        # Get stack outputs
        echo "üìä [DEPLOY] Retrieving stack outputs..."
        OUTPUTS_START=$(date +%s.%3N)
        echo "Stack Outputs:"
        aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query 'Stacks[0].Outputs' \
          --output table \
          --region "$AWS_REGION"
        OUTPUTS_END=$(date +%s.%3N)
        OUTPUTS_DURATION=$(echo "$OUTPUTS_END - $OUTPUTS_START" | bc)
        echo "‚úÖ [DEPLOY] Stack outputs retrieved in ${OUTPUTS_DURATION}s"
        
        # Get API Gateway URL
        echo "üîó [DEPLOY] Getting API Gateway URL..."
        API_START=$(date +%s.%3N)
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
          --output text \
          --region "$AWS_REGION" 2>/dev/null || echo "")
        API_END=$(date +%s.%3N)
        API_DURATION=$(echo "$API_END - $API_START" | bc)
        echo "‚úÖ [DEPLOY] API Gateway URL retrieved in ${API_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $DEPLOY_START" | bc)
        echo "üéâ [DEPLOY] Total deployment time: ${TOTAL_DURATION}s"
        
        if [ ! -z "$API_URL" ]; then
          echo "üåê [DEPLOY] API Gateway URL: $API_URL"
          echo "üß™ [DEPLOY] Available endpoints:"
          echo "  GET  $API_URL/presigned-url          # Get S3 presigned URL for upload"
          echo "  POST $API_URL/rag-query              # Standard RAG query"
          echo "  POST $API_URL/rag-query-multimodal   # Multimodal RAG query"
          echo "  GET  $API_URL/health                 # Health check"
          echo "üìã [DEPLOY] Query modes: hybrid, local, global, naive"
          echo "üìã [DEPLOY] Parsers: docling"
          echo "üìã [DEPLOY] Server: MVP Mode with ECS Task execution"
        fi
