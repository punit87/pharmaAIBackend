name: Deploy Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create RAG-Anything Dockerfile
      run: |
        mkdir -p rag-anything
        cat > rag-anything/Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            git \
            curl \
            wget \
            build-essential \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            && rm -rf /var/lib/apt/lists/*
        
        # Install uv
        RUN pip install uv
        
        # Set working directory
        WORKDIR /app
        
        # Clone RAG-Anything repository
        RUN git clone https://github.com/HKUDS/RAG-Anything.git .
        
        # Install RAG-Anything and its dependencies using uv
        RUN uv pip install -e .
        
        # Install additional dependencies for models
        RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        RUN uv pip install transformers accelerate
        RUN uv pip install sentence-transformers
        RUN uv pip install faiss-cpu
        RUN uv pip install openai
        RUN uv pip install langchain
        RUN uv pip install chromadb
        RUN uv pip install pypdf
        RUN uv pip install python-dotenv
        
        # Create a simple entrypoint script
        RUN echo '#!/bin/bash\n\
        echo "RAG-Anything is ready!"\n\
        echo "Available commands:"\n\
        echo "  python -c \"import rag_anything; print(\\\"RAG-Anything imported successfully\\\")\""\n\
        echo "  python -m rag_anything --help"\n\
        echo "  python -c \"from rag_anything import RAG; print(\\\"RAG class available\\\")\""\n\
        exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh
        
        ENTRYPOINT ["/app/entrypoint.sh"]
        CMD ["python", "-c", "import rag_anything; print('RAG-Anything is ready!')"]
        EOF

    - name: Create Docling Dockerfile
      run: |
        mkdir -p docling
        cat > docling/Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            git \
            curl \
            wget \
            build-essential \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libgstreamer1.0-0 \
            libgstreamer-plugins-base1.0-0 \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libv4l-dev \
            libxvidcore-dev \
            libx264-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libatlas-base-dev \
            gfortran \
            && rm -rf /var/lib/apt/lists/*
        
        # Install uv
        RUN pip install uv
        
        # Set working directory
        WORKDIR /app
        
        # Clone Docling repository
        RUN git clone https://github.com/docling-project/docling.git .
        
        # Install Docling and its dependencies using uv
        RUN uv pip install -e .
        
        # Install additional dependencies for document processing
        RUN uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        RUN uv pip install transformers accelerate
        RUN uv pip install sentence-transformers
        RUN uv pip install opencv-python
        RUN uv pip install pillow
        RUN uv pip install pdfplumber
        RUN uv pip install pymupdf
        RUN uv pip install python-docx
        RUN uv pip install openpyxl
        RUN uv pip install python-pptx
        RUN uv pip install beautifulsoup4
        RUN uv pip install lxml
        RUN uv pip install tesseract
        RUN uv pip install pytesseract
        RUN uv pip install pydantic
        RUN uv pip install pydantic-settings
        
        # Download and cache models
        RUN python -c "from docling.document_converter import DocumentConverter; converter = DocumentConverter(); print('Models downloaded successfully')"
        
        # Create a simple entrypoint script
        RUN echo '#!/bin/bash\n\
        echo "Docling is ready!"\n\
        echo "Available commands:"\n\
        echo "  python -c \"import docling; print(\\\"Docling imported successfully\\\")\""\n\
        echo "  docling --help"\n\
        echo "  python -c \"from docling.document_converter import DocumentConverter; print(\\\"DocumentConverter available\\\")\""\n\
        exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh
        
        ENTRYPOINT ["/app/entrypoint.sh"]
        CMD ["python", "-c", "import docling; print('Docling is ready!')"]
        EOF

    - name: Build and push RAG-Anything image
      uses: docker/build-push-action@v5
      with:
        context: ./rag-anything
        file: ./rag-anything/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/punit87/rag-anything:latest
          ${{ env.REGISTRY }}/punit87/rag-anything:${{ github.sha }}
          ${{ env.REGISTRY }}/punit87/rag-anything:${{ github.ref_name }}
          ${{ github.event.inputs.tag != '' && format('{0}/punit87/rag-anything:{1}', env.REGISTRY, github.event.inputs.tag) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docling image
      uses: docker/build-push-action@v5
      with:
        context: ./docling
        file: ./docling/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/punit87/docling:latest
          ${{ env.REGISTRY }}/punit87/docling:${{ github.sha }}
          ${{ env.REGISTRY }}/punit87/docling:${{ github.ref_name }}
          ${{ github.event.inputs.tag != '' && format('{0}/punit87/docling:{1}', env.REGISTRY, github.event.inputs.tag) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Summary
      run: |
        echo "## ðŸš€ Docker Images Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### RAG-Anything" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docling" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull RAG-Anything" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/punit87/rag-anything:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Pull Docling" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/punit87/docling:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
