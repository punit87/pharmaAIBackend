name: Deploy Pharma RAG Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: pharma-raganything-dev

jobs:
  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR Repository if not exists
      env:
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        echo "🔍 [ECR] Checking if ECR repository exists..."
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Check if repository exists
        if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null 2>&1; then
          echo "✅ [ECR] Repository already exists: $ECR_REPOSITORY"
        else
          echo "📦 [ECR] Creating ECR repository: $ECR_REPOSITORY"
          aws ecr create-repository \
            --repository-name "$ECR_REPOSITORY" \
            --region "$AWS_REGION" \
            --image-scanning-configuration scanOnPush=true
          
          echo "📋 [ECR] Setting lifecycle policy..."
          aws ecr put-lifecycle-policy \
            --repository-name "$ECR_REPOSITORY" \
            --region "$AWS_REGION" \
            --lifecycle-policy-text '{
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Keep only 1 image",
                  "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 1
                  },
                  "action": {
                    "type": "expire"
                  }
                }
              ]
            }'
          
          echo "✅ [ECR] Repository created successfully: $ECR_REPOSITORY"
        fi

    - name: Build and push RAG-Anything async server image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        echo "🔄 [DEPLOY] Starting RAG-Anything async server image build at $(date)"
        BUILD_START=$(date +%s.%3N)
        
        echo "📦 [DEPLOY] Building RAG-Anything async server Docker image..."
        echo "📋 [DEPLOY] Dependencies: raganything[all], boto3, flask, docling"
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        BUILD_END=$(date +%s.%3N)
        BUILD_DURATION=$(echo "$BUILD_END - $BUILD_START" | bc)
        echo "✅ [DEPLOY] RAG-Anything async server image built in ${BUILD_DURATION}s"
        
        echo "📤 [DEPLOY] Pushing RAG-Anything async server image to ECR..."
        PUSH_START=$(date +%s.%3N)
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        PUSH_END=$(date +%s.%3N)
        PUSH_DURATION=$(echo "$PUSH_END - $PUSH_START" | bc)
        echo "✅ [DEPLOY] RAG-Anything async server image pushed in ${PUSH_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $BUILD_START" | bc)
        echo "🎉 [DEPLOY] RAG-Anything async server total time: ${TOTAL_DURATION}s"
        echo "📋 [DEPLOY] Pushed RAG-Anything async server image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Validate ECR Images Exist
      env:
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        echo "🔍 [VALIDATE] Checking ECR images exist before deployment..."
        VALIDATE_START=$(date +%s.%3N)
        
        # Get AWS Account ID and region
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Set image URI
        RAGANYTHING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"
        
        echo "📋 [VALIDATE] Checking image: $RAGANYTHING_IMAGE_URI"
        
        # Wait and retry logic for ECR image validation
        MAX_ATTEMPTS=10
        RETRY_DELAY=30
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "🔄 [VALIDATE] Attempt $ATTEMPT/$MAX_ATTEMPTS - Checking ECR image..."
          
          # Check if ECR repository exists
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "✅ [VALIDATE] ECR repository exists: $ECR_REPOSITORY"
            
            # Check if image exists in repository
            if aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag=latest --region "$AWS_REGION" >/dev/null 2>&1; then
              echo "✅ [VALIDATE] Image exists: $RAGANYTHING_IMAGE_URI"
              echo "🎉 [VALIDATE] All ECR images validated successfully!"
              break
            else
              echo "⏳ [VALIDATE] Image not found yet, waiting $RETRY_DELAY seconds..."
            fi
          else
            echo "⏳ [VALIDATE] ECR repository not found yet, waiting $RETRY_DELAY seconds..."
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ [VALIDATE] Failed to find ECR images after $MAX_ATTEMPTS attempts"
            echo "❌ [VALIDATE] Expected image: $RAGANYTHING_IMAGE_URI"
            echo "❌ [VALIDATE] Please check if the build-and-push job completed successfully"
            exit 1
          fi
          
          sleep $RETRY_DELAY
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        VALIDATE_END=$(date +%s.%3N)
        VALIDATE_DURATION=$(echo "$VALIDATE_END - $VALIDATE_START" | bc)
        echo "✅ [VALIDATE] ECR validation completed in ${VALIDATE_DURATION}s"

    - name: Deploy CloudFormation stack
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
      run: |
        echo "🔄 [DEPLOY] Starting CloudFormation deployment at $(date)"
        DEPLOY_START=$(date +%s.%3N)
        
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Set variables
        STACK_NAME="pharma-rag-infrastructure"
        ENVIRONMENT="dev"
        TEMPLATE_FILE="infrastructure/ecs-infrastructure.yml"
        
        # Set image URI
        RAGANYTHING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/pharma-raganything-dev:latest"
        
        echo "📋 [DEPLOY] Deploying CloudFormation stack: $STACK_NAME-$ENVIRONMENT"
        echo "📋 [DEPLOY] RAG-Anything async server Image URI: $RAGANYTHING_IMAGE_URI"
          echo "📋 [DEPLOY] Features: MVP Mode, Document Processing, Query Processing, Multimodal RAG, Docling parser"
        
        # Deploy CloudFormation stack
        echo "🚀 [DEPLOY] Starting CloudFormation deployment..."
        CF_START=$(date +%s.%3N)
        aws cloudformation deploy \
          --template-file "$TEMPLATE_FILE" \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            Environment="$ENVIRONMENT" \
            RaganythingImageUri="$RAGANYTHING_IMAGE_URI" \
            OpenAIApiKey="$OPENAI_API_KEY" \
            Neo4jUri="$NEO4J_URI" \
            Neo4jUsername="$NEO4J_USERNAME" \
            Neo4jPassword="$NEO4J_PASSWORD" \
          --region "$AWS_REGION"
        CF_END=$(date +%s.%3N)
        CF_DURATION=$(echo "$CF_END - $CF_START" | bc)
        echo "✅ [DEPLOY] CloudFormation deployment completed in ${CF_DURATION}s"
        
        # Get stack outputs
        echo "📊 [DEPLOY] Retrieving stack outputs..."
        OUTPUTS_START=$(date +%s.%3N)
        echo "Stack Outputs:"
        aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query 'Stacks[0].Outputs' \
          --output table \
          --region "$AWS_REGION"
        OUTPUTS_END=$(date +%s.%3N)
        OUTPUTS_DURATION=$(echo "$OUTPUTS_END - $OUTPUTS_START" | bc)
        echo "✅ [DEPLOY] Stack outputs retrieved in ${OUTPUTS_DURATION}s"
        
        # Get API Gateway URL
        echo "🔗 [DEPLOY] Getting API Gateway URL..."
        API_START=$(date +%s.%3N)
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
          --output text \
          --region "$AWS_REGION" 2>/dev/null || echo "")
        API_END=$(date +%s.%3N)
        API_DURATION=$(echo "$API_END - $API_START" | bc)
        echo "✅ [DEPLOY] API Gateway URL retrieved in ${API_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $DEPLOY_START" | bc)
        echo "🎉 [DEPLOY] Total deployment time: ${TOTAL_DURATION}s"
        
        if [ ! -z "$API_URL" ]; then
          echo "🌐 [DEPLOY] API Gateway URL: $API_URL"
          echo "🧪 [DEPLOY] Available endpoints:"
          echo "  GET  $API_URL/presigned-url          # Get S3 presigned URL for upload"
          echo "  POST $API_URL/rag-query              # Standard RAG query"
          echo "  POST $API_URL/rag-query-multimodal   # Multimodal RAG query"
          echo "  GET  $API_URL/health                 # Health check"
          echo "📋 [DEPLOY] Query modes: hybrid, local, global, naive"
          echo "📋 [DEPLOY] Parsers: docling"
          echo "📋 [DEPLOY] Server: MVP Mode with ECS Task execution"
        fi
