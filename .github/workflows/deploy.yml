name: Deploy Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      build_docling:
        description: 'Build Docling image'
        required: false
        default: true
        type: boolean
      build_rag_anything:
        description: 'Build RAG-Anything image'
        required: false
        default: true
        type: boolean
      rag_anything_config:
        description: 'RAG-Anything configuration'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - all
      rag_anything_parser:
        description: 'RAG-Anything parser selection'
        required: false
        default: 'mineru'
        type: choice
        options:
          - mineru
          - docling

env:
  REGISTRY: ghcr.io

jobs:
  build-rag-anything:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_rag_anything != 'false' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create RAG-Anything Dockerfile
      run: |
        mkdir -p rag-anything
        cat > rag-anything/Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Build arguments
        ARG RAG_CONFIG=basic
        ARG RAG_PARSER=mineru
        
        # Install system dependencies including LibreOffice
        RUN apt-get update && apt-get install -y \
            git \
            curl \
            wget \
            build-essential \
            libreoffice \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            && rm -rf /var/lib/apt/lists/*
        
        # Install uv
        RUN pip install uv
        
        # Set working directory
        WORKDIR /app
        
        # Install RAG-Anything from GitHub using pip install
        RUN uv pip install git+https://github.com/HKUDS/RAG-Anything.git --system
        
        # Install additional dependencies based on configuration
        RUN if [ "$RAG_CONFIG" = "all" ]; then \
            echo "Installing all optional dependencies..." && \
            uv pip install Pillow ReportLab --system; \
        else \
            echo "Installing basic dependencies only..."; \
        fi
        
        # Create a simple entrypoint script
        RUN echo '#!/bin/bash\n\
        echo "RAG-Anything is ready!"\n\
        echo "Available commands:"\n\
        echo "  python -c \"import raganything; print(\\\"RAG-Anything imported successfully\\\")\""\n\
        echo "  python -c \"from raganything import RAGAnything; print(\\\"RAGAnything class available\\\")\""\n\
        echo "  python -c \"import libreoffice; print(\\\"LibreOffice available\\\")\""\n\
        echo "  python -c \"from PIL import Image; print(\\\"Pillow available\\\")\""\n\
        exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh
        
        ENTRYPOINT ["/app/entrypoint.sh"]
        CMD ["python", "-c", "import raganything; print('RAG-Anything is ready!')"]
        EOF

    - name: Build and push RAG-Anything image
      uses: docker/build-push-action@v5
      with:
        context: ./rag-anything
        file: ./rag-anything/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          RAG_CONFIG=${{ github.event.inputs.rag_anything_config || 'basic' }}
          RAG_PARSER=${{ github.event.inputs.rag_anything_parser || 'mineru' }}
        tags: |
          ${{ env.REGISTRY }}/punit87/rag-anything:latest
          ${{ env.REGISTRY }}/punit87/rag-anything:${{ github.sha }}
          ${{ env.REGISTRY }}/punit87/rag-anything:${{ github.ref_name }}
          ${{ github.event.inputs.tag != '' && format('{0}/punit87/rag-anything:{1}', env.REGISTRY, github.event.inputs.tag) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-docling:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_docling != 'false' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Docling Dockerfile
      run: |
        mkdir -p docling
        cat > docling/Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            git \
            curl \
            wget \
            build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        # Install uv
        RUN pip install uv
        
        # Set working directory
        WORKDIR /app
        
        # Install Docling from PyPI
        RUN uv pip install docling --system
        
        # Create a simple entrypoint script
        RUN echo '#!/bin/bash\n\
        echo "Docling is ready!"\n\
        echo "Available commands:"\n\
        echo "  python -c \"import docling; print(\\\"Docling imported successfully\\\")\""\n\
        echo "  docling --help"\n\
        echo "  python -c \"from docling.document_converter import DocumentConverter; print(\\\"DocumentConverter available\\\")\""\n\
        exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh
        
        ENTRYPOINT ["/app/entrypoint.sh"]
        CMD ["python", "-c", "import docling; print('Docling is ready!')"]
        EOF

    - name: Build and push Docling image
      uses: docker/build-push-action@v5
      with:
        context: ./docling
        file: ./docling/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/punit87/docling:latest
          ${{ env.REGISTRY }}/punit87/docling:${{ github.sha }}
          ${{ env.REGISTRY }}/punit87/docling:${{ github.ref_name }}
          ${{ github.event.inputs.tag != '' && format('{0}/punit87/docling:{1}', env.REGISTRY, github.event.inputs.tag) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  summary:
    runs-on: ubuntu-latest
    needs: [build-rag-anything, build-docling]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## ðŸš€ Docker Images Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### RAG-Anything" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/rag-anything:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docling" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/punit87/docling:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull RAG-Anything" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/punit87/rag-anything:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Pull Docling" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/punit87/docling:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
