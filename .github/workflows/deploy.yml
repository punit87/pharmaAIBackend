name: Deploy Pharma RAG Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY_DOCLING: pharma-docling-dev
  ECR_REPOSITORY_RAGANYTHING: pharma-raganything-dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Build and push Docling image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_DOCLING }}
        IMAGE_TAG: latest
      run: |
        echo "üîÑ [DEPLOY] Starting Docling image build at $(date)"
        BUILD_START=$(date +%s.%3N)
        
        echo "üì¶ [DEPLOY] Building Docling Docker image..."
        docker build -f Dockerfile.docling -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        BUILD_END=$(date +%s.%3N)
        BUILD_DURATION=$(echo "$BUILD_END - $BUILD_START" | bc)
        echo "‚úÖ [DEPLOY] Docling image built in ${BUILD_DURATION}s"
        
        echo "üì§ [DEPLOY] Pushing Docling image to ECR..."
        PUSH_START=$(date +%s.%3N)
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        PUSH_END=$(date +%s.%3N)
        PUSH_DURATION=$(echo "$PUSH_END - $PUSH_START" | bc)
        echo "‚úÖ [DEPLOY] Docling image pushed in ${PUSH_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $BUILD_START" | bc)
        echo "üéâ [DEPLOY] Docling total time: ${TOTAL_DURATION}s"
        echo "üìã [DEPLOY] Pushed Docling image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build and push RAG-Anything image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_RAGANYTHING }}
        IMAGE_TAG: latest
      run: |
        echo "üîÑ [DEPLOY] Starting RAG-Anything image build at $(date)"
        BUILD_START=$(date +%s.%3N)
        
        echo "üì¶ [DEPLOY] Building RAG-Anything Docker image..."
        docker build -f Dockerfile.raganything -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        BUILD_END=$(date +%s.%3N)
        BUILD_DURATION=$(echo "$BUILD_END - $BUILD_START" | bc)
        echo "‚úÖ [DEPLOY] RAG-Anything image built in ${BUILD_DURATION}s"
        
        echo "üì§ [DEPLOY] Pushing RAG-Anything image to ECR..."
        PUSH_START=$(date +%s.%3N)
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        PUSH_END=$(date +%s.%3N)
        PUSH_DURATION=$(echo "$PUSH_END - $PUSH_START" | bc)
        echo "‚úÖ [DEPLOY] RAG-Anything image pushed in ${PUSH_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $BUILD_START" | bc)
        echo "üéâ [DEPLOY] RAG-Anything total time: ${TOTAL_DURATION}s"
        echo "üìã [DEPLOY] Pushed RAG-Anything image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Deploy CloudFormation stack
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
      run: |
        echo "üîÑ [DEPLOY] Starting CloudFormation deployment at $(date)"
        DEPLOY_START=$(date +%s.%3N)
        
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        
        # Set variables
        STACK_NAME="pharma-rag-infrastructure"
        ENVIRONMENT="dev"
        TEMPLATE_FILE="infrastructure/ecs-infrastructure.yml"
        
        # Set image URIs
        DOCLING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/pharma-docling-dev:latest"
        RAGANYTHING_IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/pharma-raganything-dev:latest"
        
        echo "üìã [DEPLOY] Deploying CloudFormation stack: $STACK_NAME-$ENVIRONMENT"
        echo "üìã [DEPLOY] Docling Image URI: $DOCLING_IMAGE_URI"
        echo "üìã [DEPLOY] RAG-Anything Image URI: $RAGANYTHING_IMAGE_URI"
        
        # Deploy CloudFormation stack
        echo "üöÄ [DEPLOY] Starting CloudFormation deployment..."
        CF_START=$(date +%s.%3N)
        aws cloudformation deploy \
          --template-file "$TEMPLATE_FILE" \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            Environment="$ENVIRONMENT" \
            DoclingImageUri="$DOCLING_IMAGE_URI" \
            RaganythingImageUri="$RAGANYTHING_IMAGE_URI" \
            OpenAIApiKey="$OPENAI_API_KEY" \
            Neo4jUri="$NEO4J_URI" \
            Neo4jUsername="$NEO4J_USERNAME" \
            Neo4jPassword="$NEO4J_PASSWORD" \
          --region "$AWS_REGION"
        CF_END=$(date +%s.%3N)
        CF_DURATION=$(echo "$CF_END - $CF_START" | bc)
        echo "‚úÖ [DEPLOY] CloudFormation deployment completed in ${CF_DURATION}s"
        
        # Get stack outputs
        echo "üìä [DEPLOY] Retrieving stack outputs..."
        OUTPUTS_START=$(date +%s.%3N)
        echo "Stack Outputs:"
        aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query 'Stacks[0].Outputs' \
          --output table \
          --region "$AWS_REGION"
        OUTPUTS_END=$(date +%s.%3N)
        OUTPUTS_DURATION=$(echo "$OUTPUTS_END - $OUTPUTS_START" | bc)
        echo "‚úÖ [DEPLOY] Stack outputs retrieved in ${OUTPUTS_DURATION}s"
        
        # Get API Gateway URL
        echo "üîó [DEPLOY] Getting API Gateway URL..."
        API_START=$(date +%s.%3N)
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME-$ENVIRONMENT" \
          --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
          --output text \
          --region "$AWS_REGION" 2>/dev/null || echo "")
        API_END=$(date +%s.%3N)
        API_DURATION=$(echo "$API_END - $API_START" | bc)
        echo "‚úÖ [DEPLOY] API Gateway URL retrieved in ${API_DURATION}s"
        
        TOTAL_END=$(date +%s.%3N)
        TOTAL_DURATION=$(echo "$TOTAL_END - $DEPLOY_START" | bc)
        echo "üéâ [DEPLOY] Total deployment time: ${TOTAL_DURATION}s"
        
        if [ ! -z "$API_URL" ]; then
          echo "üåê [DEPLOY] API Gateway URL: $API_URL"
          echo "üß™ [DEPLOY] Test endpoints:"
          echo "  GET  $API_URL/presigned-url"
          echo "  POST $API_URL/rag-query"
        fi
