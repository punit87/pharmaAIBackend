name: 🚀 Build RAG-Anything Container Images for Fargate/ECS
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: punit87/rag-anything
  PARSER: docling

jobs:
  build-rag-anything:
    name: 🛠️ Build RAG-Anything Container Image (Fargate/ECS)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐳 Build and Push Container Image (Fargate/ECS)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RAG_PARSER=${{ env.PARSER }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  summary:
    name: 🧾 Deployment Summary
    runs-on: ubuntu-latest
    needs: build-rag-anything
    if: always()
    steps:
      - name: 🪶 Write Deployment Summary
        run: |
          {
            echo "## 🚀 RAG-Anything Container Images Built Successfully"
            echo ""
            echo "### 🎯 Container Images Built"
            echo "- **Registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`"
            echo "- **Tags**: \`latest\`, \`${{ github.ref_name }}\`, \`${{ github.sha }}\`"
            echo "- **Architectures**: amd64, arm64"
            echo "- **Platform**: AWS Fargate/ECS (Container Images)"
            echo ""
            echo "### ✨ Optimizations"
            echo "- ✅ Multi-stage build with layer caching"
            echo "- ✅ Tesseract OCR pre-installed"
            echo "- ✅ FastAPI server with health checks"
            echo "- ✅ Production-ready logging"
            echo "- ✅ Optimized for Fargate/ECS deployment"
            echo ""
            echo "### 📊 Recommended ECS Configuration"
            echo "\`\`\`"
            echo "CPU: 2048-4096 (2-4 vCPU)"
            echo "Memory: 4096-8192 MB (4-8 GB)"
            echo "Platform: Fargate"
            echo "\`\`\`"
            echo ""
            echo "### 🚀 Deployment Options"
            echo ""
            echo "#### **Fargate/ECS Deployment:**"
            echo "- Use the built container images above"
            echo "- Deploy via ECS Task Definition"
            echo "- Configure load balancer and auto-scaling"
            echo ""
            echo "#### **Lambda Deployment:**"
            echo "- Use MCP API to deploy Lambda functions"
            echo "- Lambda Dockerfile available: \`Dockerfile.lambda\`"
            echo "- Deploy via AWS CLI or MCP tools"
            echo ""
            echo "### 📝 Next Steps"
            echo "1. **Fargate**: Use container images for ECS deployment"
            echo "2. **Lambda**: Use MCP API to deploy Lambda functions"
            echo "3. **S3 Integration**: Configure S3 triggers for document processing"
          } >> $GITHUB_STEP_SUMMARY